generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id     String @id @default(cuid())
  email  String @unique
  name   String
  pwHash String

  plans Plan[]
}

model Plan {
  id          String @id @default(cuid())
  userId      String
  catalogId   String
  displayName String

  majors    Major[]
  minors    Minor[]
  majorReqs PlanMajorRequirements[]
  minorReqs PlanMinorRequirements[]

  User    User?   @relation(fields: [userId], references: [id])
  Catalog Catalog @relation(fields: [catalogId], references: [id])
}

model Catalog {
  id   String @id @default(cuid())
  year Int

  plans             Plan[]
  majors            Major[]
  minors            Minor[]
  majorRequirements MajorRequirements[]
  minorRequirements MinorRequirements[]
}

model Department {
  id   String @id @default(cuid())
  name String

  majors  Major[]
  minors  Minor[]
  courses Course[]
}

model Major {
  id           String  @id @default(cuid())
  name         String
  departmentId String?
  catalogId    String?

  plans         Plan[]
  CourseToMajor MajorRequirements[]

  Department Department? @relation(fields: [departmentId], references: [id])
  Catalog    Catalog?    @relation(fields: [catalogId], references: [id])
}

model Minor {
  id           String  @id @default(cuid())
  name         String
  departmentId String?
  catalogId    String?

  plans         Plan[]
  CourseToMinor MinorRequirements[]

  Department Department? @relation(fields: [departmentId], references: [id])
  Catalog    Catalog?    @relation(fields: [catalogId], references: [id])
}

model Course {
  id           String  @id @default(cuid())
  name         String
  description  String
  credits      Int
  departmentId String?

  prerequisites Prerequisite[]      @relation("Prereq")
  CourseToMajor MajorRequirements[]
  CourseToMinor MinorRequirements[]

  Department Department? @relation(fields: [departmentId], references: [id])
}

model Prerequisite {
  id          String  @id @default(cuid())
  corequisite Boolean
  courseId    String
  prereqId    String

  Course Course @relation("Prereq", fields: [courseId], references: [id])
}

model PlanMajorRequirements {
  id            String @id @default(cuid())
  planId        String
  requirementId String

  Plan        Plan              @relation(fields: [planId], references: [id])
  Requirement MajorRequirements @relation(fields: [requirementId], references: [id])
}

model MajorRequirements {
  id        String @id @default(cuid())
  courseId  String
  majorId   String
  catalogId String

  PlanMajorRequirements PlanMajorRequirements[]

  Course  Course  @relation(fields: [courseId], references: [id])
  Major   Major   @relation(fields: [majorId], references: [id])
  Catalog Catalog @relation(fields: [catalogId], references: [id])
}

model PlanMinorRequirements {
  id            String @id @default(cuid())
  planId        String
  requirementId String

  Plan        Plan              @relation(fields: [planId], references: [id])
  Requirement MinorRequirements @relation(fields: [requirementId], references: [id])
}

model MinorRequirements {
  id        String @id @default(cuid())
  courseId  String
  minorId   String
  catalogId String

  PlanMinorRequirements PlanMinorRequirements[]

  Course  Course  @relation(fields: [courseId], references: [id])
  Minor   Minor   @relation(fields: [minorId], references: [id])
  Catalog Catalog @relation(fields: [catalogId], references: [id])
}
