generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model catalog {
  id    Int     @id @default(autoincrement())
  year  Int?
  plans plans[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model course {
  id                 Int                  @id @default(autoincrement())
  title              String?              @db.VarChar(40)
  description        String?              @db.VarChar(4096)
  max_credits        Float?               @db.Float
  min_credits        Float?               @db.Float
  number             String?              @db.VarChar(40)
  subject_code       String?              @db.VarChar(40)
  terms_offered      String?              @db.VarChar(40)
  years_offered      String?              @db.VarChar(40)
  primary_course     equal_courses[]      @relation("Primary")
  equal_course       equal_courses[]      @relation("Equivalent")
  major_requirements major_requirements[]
  minor_requirements minor_requirements[]
  primary_course_req prereq[]             @relation("primary_req_id")
  prereq             prereq[]             @relation("req")
  semester_to_course semester_to_course[]
  track_requirements track_to_course[]
}

model prereq {
  id        Int      @id @default(autoincrement())
  course_id Int
  prereq_id Int
  coreq     Boolean?
  course    course   @relation("primary_req_id", fields: [course_id], references: [id], onDelete: Cascade)
  prereq    course   @relation("req", fields: [prereq_id], references: [id], onDelete: Cascade)

  @@index([course_id], map: "prereq_course_id_fkey")
  @@index([prereq_id], map: "prereq_prereq_id_fkey")
}

model equal_courses {
  id                Int     @id @default(autoincrement())
  course_id         Int?
  eq_course_id      Int?
  course            course? @relation("Primary", fields: [course_id], references: [id], onDelete: Cascade)
  equivalent_course course? @relation("Equivalent", fields: [eq_course_id], references: [id], onDelete: Cascade)

  @@index([course_id], map: "equal_courses_course_id_fkey")
  @@index([eq_course_id], map: "equal_courses_eq_course_id_fkey")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model major {
  id                 Int                  @id @default(autoincrement())
  name               String?              @db.VarChar(40)
  credits            Float?               @db.Float
  major_requirements major_requirements[]
  major_to_plan      major_to_plan[]
}

model major_requirements {
  id        Int      @id @default(autoincrement())
  elective  Boolean?
  major_id  Int?
  course_id Int?
  major     major?   @relation(fields: [major_id], references: [id], onDelete: Cascade, map: "major_requirements_ibfk_1")
  course    course?  @relation(fields: [course_id], references: [id], onDelete: Cascade, map: "major_requirements_ibfk_2")

  @@index([course_id], map: "course_id")
  @@index([major_id], map: "major_id")
}

model major_to_plan {
  major_id Int
  plan_id  Int
  major    major @relation(fields: [major_id], references: [id], onDelete: Cascade, map: "major_to_plan_ibfk_1")
  plans    plans @relation(fields: [plan_id], references: [id], onDelete: Cascade, map: "major_to_plan_ibfk_2")

  @@id([major_id, plan_id])
  @@index([plan_id], map: "plan_id")
}

model minor {
  id                 Int                  @id @default(autoincrement())
  name               String?              @db.VarChar(40)
  credits            Int?
  minor_requirements minor_requirements[]
  minor_to_plan      minor_to_plan[]
}

model minor_requirements {
  id          Int      @id @default(autoincrement())
  elective    Boolean?
  minor_id    Int?
  course_id   Int?
  num_credits Int?
  minor       minor?   @relation(fields: [minor_id], references: [id], onDelete: Cascade, map: "minor_requirements_ibfk_1")
  course      course?  @relation(fields: [course_id], references: [id], onDelete: Cascade, map: "minor_requirements_ibfk_2")

  @@index([course_id], map: "course_id")
  @@index([minor_id], map: "minor_id")
}

model minor_to_plan {
  minor_id Int
  plan_id  Int
  minor    minor @relation(fields: [minor_id], references: [id], onDelete: Cascade, map: "minor_to_plan_ibfk_1")
  plans    plans @relation(fields: [plan_id], references: [id], onDelete: Cascade, map: "minor_to_plan_ibfk_2")

  @@id([minor_id, plan_id])
  @@index([plan_id], map: "plan_id")
}

model plans {
  id            Int             @id @default(autoincrement())
  user_id       Int?
  catalog_id    Int?
  name          String?         @db.VarChar(40)
  major_to_plan major_to_plan[]
  minor_to_plan minor_to_plan[]
  user          user?           @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "plans_ibfk_1")
  catalog       catalog?        @relation(fields: [catalog_id], references: [id], onDelete: Cascade, map: "plans_ibfk_2")
  semester      semester[]

  @@index([catalog_id], map: "catalog_id")
  @@index([user_id], map: "user_id")
}

model user {
  id       Int     @id @default(autoincrement())
  name     String? @db.VarChar(40)
  email    String? @unique @db.VarChar(40)
  password String? @db.VarChar(60)
  plans    plans[]
}

model semester {
  id                 Int                  @id @default(autoincrement())
  plan_id            Int?
  year               Int?
  season             String?              @db.VarChar(40)
  plans              plans?               @relation(fields: [plan_id], references: [id], onDelete: Cascade, map: "semester_ibfk_1")
  semester_to_course semester_to_course[]

  @@index([plan_id], map: "plan_id")
}

model semester_to_course {
  id          Int       @id @default(autoincrement())
  semester_id Int?
  course_id   Int?
  semester    semester? @relation(fields: [semester_id], references: [id], onDelete: Cascade, map: "semester_to_course_ibfk_1")
  course      course?   @relation(fields: [course_id], references: [id], onDelete: Cascade, map: "semester_to_course_ibfk_2")

  @@index([course_id], map: "course_id")
  @@index([semester_id], map: "semester_id")
}

model tracks {
  id              Int               @id @default(autoincrement())
  name            String            @db.VarChar(40)
  track_to_course track_to_course[]
}

model track_to_course {
  id        Int      @id @default(autoincrement())
  elective  Boolean?
  track_id  Int?
  course_id Int?
  track     tracks?  @relation(fields: [track_id], references: [id], onDelete: Cascade, map: "trackRequirements_ibfk_1")
  course    course?  @relation(fields: [course_id], references: [id], onDelete: Cascade, map: "trackRequirements_ibfk_2")

  @@index([course_id], map: "course_id")
  @@index([track_id], map: "track_id")
}
